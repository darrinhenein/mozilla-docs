{
  "name": "rsyncwrapper",
  "version": "0.3.0",
  "description": "An async wrapper to the rsync command line utility for Node.js.",
  "main": "lib/rsyncwrapper",
  "repository": {
    "type": "git",
    "url": "git://github.com/jedrichards/rsyncwrapper.git"
  },
  "homepage": "https://github.com/jedrichards/rsyncwrapper",
  "bugs": {
    "url": "https://github.com/jedrichards/rsyncwrapper/issues"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "lodash": "~2.4.1"
  },
  "devDependencies": {
    "grunt": "~0.4.0",
    "grunt-contrib-clean": "~0.5.0",
    "grunt-contrib-jshint": "~0.8.0",
    "vows": "~0.7.0",
    "grunt-vows": "~0.4.0",
    "grunt-shell": "~0.6.4"
  },
  "keywords": [
    "rsync",
    "command line utility wrapper",
    "async",
    "syncing",
    "copying",
    "file manipulation",
    "remote",
    "ssh"
  ],
  "author": {
    "name": "Jed Richards",
    "email": "jed@seisaku.co.uk"
  },
  "license": "MIT",
  "engines": {
    "node": ">=0.10.25"
  },
  "readme": "## rsyncwrapper\n\nAn async wrapper to the rsync command line utility for Node.js. Also available as the Grunt task [grunt-rsync](https://github.com/jedrichards/grunt-rsync).\n\n### Release notes\n\n- `0.3.0` Swapping include/exclude order in the generated rsync command. Includes now come before excludes to faciliate the normal way of excluding file patterns with exceptions in rsync. See [#16](https://github.com/jedrichards/rsyncwrapper/pull/16).\n- `0.2.0` Now launching the rsync command in a shell like `child_process.exec` [does in Node Core](https://github.com/joyent/node/blob/937e2e351b2450cf1e9c4d8b3e1a4e2a2def58bb/lib/child_process.js#L589). This enables us to use `spawn`, and avoid `exec` `maxBuffer`, while retaining full shell wildcard expansion.\n- `0.1.0` Now using `child_process.exec` as opposed to `child_process.spawn` to enable proper shell wildcard expansions in the `options.src` value. SSH option handling has been improved.\n- `0.0.1` Initial release.\n\n### Prerequisites\n\nA reasonably modern version of rsync (>=2.6.9) in your PATH.\n\n### Installation\n\n    $ npm install rsyncwrapper\n\n### Usage\n\n```javascript\nvar rsync = require(\"rsyncwrapper\").rsync;\nrsync(options,[callback]);\n```\n\nThe `callback` function gets four arguments `(error,stdout,stderr,cmd)`.\n\n`error`: An `Error` object if rsync failed, otherwise `null`.\n\n`stdout`: stdout from rsync.\n\n`stderr`: stderr from rsync.\n\n`cmd`: The command string that was used to invoke rsync for debugging purposes.\n\nThe `options` argument is an object literal. See below for possible fields.\n\n### Options\n\n##### `src [String|Array<String>] *required`\n\nPath to src. Can be a single filename, or an array of filenames. Shell wildcard expansion is supported. Examples:\n\n```\nsrc: \"./dist/\"\nsrc: [\"./dir-a/file1\",\"./dir-b/file2\"]\nsrc: \"./*.foo\"\nsrc: \"foo{1,2,3}.txt\"\netc.\n```\n\n##### `dest [String] *required`\n\nPath to destination. Example, `\"/var/www/mysite.tld\"`.\n\n##### `ssh [Bool] default: false`\n\nRun rsync over ssh.  This is `false` by default.  To use this you need to have public/private key passwordless ssh access setup and working between your workstation and your host.  If set to `true`, you should specify ssh host data as part of your `src` or `dest` values, e.g. `user@1.2.3.4:/var/www/site`.\n\nAnother good approach is to define a host alias in your ssh config and just reference that alias in your rsync options.\n\n##### `port [String]`\n\nIf your ssh host uses a non standard SSH port then set it here. Example, `\"1234\"`.\n\n##### `privateKey [String]`\n\nTo specify an SSH private key other than the default for this host. Example, `\"~/.ssh/aws.pem\"`\n\n##### `recursive [Boolean] default: false`\n\nRecurse into directories. This is `false` by default which means only files in the `src` root are copied. Equivalent to the `--recursive` rsync command line flag.\n\n##### `syncDest [Boolean] default: false`\n\nDelete objects in `dest` that aren't present in `src`. Also deletes files that have been specifically excluded from transfer in `dest`. Take care with this option, since misconfiguration could cause data loss. Equivalent to setting both the `--delete` and `--delete-excluded` rsync command line flags.\n\n##### `syncDestIgnoreExcl [Boolean] default: false`\n\nThe same as `syncDest`, but without the `--delete-excluded` behaviour. One use case for using this option could be while syncing a Node app to a server: you want to exclude transferring the local `node_modules` folder while retaining the remote `node_modules` folder.\n\n##### `compareMode [String] enum: \"checksum\"|\"sizeOnly\"`\n\nBy default files will be compared by modified date and file size. Set this value to `checksum` to compare by a 128bit checksum, or `sizeOnly` to compare only by file size.\n\n##### `exclude [Array<String>]`\n\nOptional array of rsync patterns to exclude from transfer.  Include patterns are defined before exclude patterns when building the rsync command.\n\n##### `include [Array<String>]`\n\nOptional array of rsync patterns to include in the transfer, if previously excluded. Include patterns are defined before exclude patterns when building the rsync command.\n\n##### `dryRun [Boolean] default: false`\n\nBuffer verbose information to stdout about the actions rsyncwrapper would take without modifying the filesystem. Equivalent to setting both the `--dry-run` and `--verbose` rsync command line flags.\n\n#### `onStdout [Function]`\n\nOptional callback function. Called every time rsync outputs to `stdout`. Use this to print rsync output as it happens, rather than all at the end. Example: `function (data) { console.log(data) }`.\n\n#### `onStderr [Function]`\n\nOptional callback function. Called every time rsync outputs to `stderr`. Use this to print rsync error output as it happens, rather than all at the end. Example: `function (data) { console.log(data) }`.\n\n##### `args [Array<String>]`\n\nArray of additional arbitrary rsync command line options and flags.\n\nThe above options are provided for convenience and are designed to cover the most common use cases for rsync, they don't necessarily map directly to single rsync arguments with the same names. If you'd like to handcraft your rsync command then just use the `src`, `dest` and `args` options.\n\nFor extra information and subtlety relating to rsync options please consult the [rsync manpages](http://linux.die.net/man/1/rsync).\n\n### Tests\n\nBasic tests are run on [Vows Async BDD](http://vowsjs.org/) via this package's Gruntfile. To test rsyncwrapper clone the repo and ensure that the devDependancies are present. Additionally ensure that Grunt and Vows are installed globally, and then invoke:\n\n    $ npm test\n\n### Examples\n\nCopy a single file to another location. If the `dest` folder doesn't exist rsync will do a `mkdir` and create it. However it will only `mkdir` one missing directory deep (i.e. not the equivalent of `mkdir -p`).\n\n```javascript\nrsync({\n    src: \"./file.txt\",\n    dest: \"./tmp/file.txt\"\n},function (error,stdout,stderr,cmd) {\n    if ( error ) {\n        // failed\n        console.log(error.message);\n    } else {\n        // success\n    }\n});\n```\n\nCopy the contents of a directory to another folder, while excluding `txt` files. Note the trailing `/` on the `src` folder and the absence of a trailing `/` on the `dest` folder - this is the required format when copy the contents of a folder. Again rsync will only `mkdir` one level deep:\n\n```javascript\nrsync({\n    src: \"./src-folder/\",\n    dest: \"./dest-folder\",\n    recursive: true,\n    exclude: [\"*.txt\"]\n},function (error,stdout,stderr,cmd) {\n    if ( error ) {\n        // failed\n        console.log(error.message);\n    } else {\n        // success\n    }\n});\n```\n\nSyncronise the contents of a directory on a remote host with the contents of a local directory using the checksum algorithm to determine if a file needs copying:\n\n```javascript\nrsync({\n    src: \"./local-src/\",\n    dest: \"user@1.2.3.4:/var/www/remote-dest\",\n    ssh: true,\n    recursive: true,\n    syncDest: true,\n    compareMode: \"checksum\"\n},function (error,stdout,stderr,cmd) {\n    if ( error ) {\n        // failed\n        console.log(error.message);\n    } else {\n        // success\n    }\n});\n```\n\n## TODO\n\n- Add tests to cover usage of more options.\n",
  "readmeFilename": "README.md",
  "_id": "rsyncwrapper@0.3.0",
  "_from": "rsyncwrapper@~0.3.0"
}
